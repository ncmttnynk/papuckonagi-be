#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('papuckonagi-be:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);
require('../sockets/index')(io);

const sequelize = require('../database/db');

const Brand = require('../model/Brand');
const Sneaker = require('../model/Sneaker');
const District = require('../model/District');
const Province = require('../model/Province');
const Order = require('../model/Order');
const OrderDetail = require('../model/OrderDetail');
const Customer = require('../model/Customer');

Sneaker.belongsTo(Brand, { foreignKey: { name: 'BRAND_ID', allowNull: false, defaultValue: 0 } });

District.belongsTo(Province, {
  foreignKey: { name: 'PROVINCE_ID', allowNull: false, defaultValue: 0 },
});

Province.hasMany(District, {
  as: 'DISTRICTS',
  foreignKey: { name: 'PROVINCE_ID', allowNull: false, defaultValue: 0 },
});

Order.belongsTo(Province, {
  foreignKey: { name: 'PROVINCE_ID', allowNull: false, defaultValue: 0 },
});

Order.belongsTo(District, {
  foreignKey: { name: 'DISTRICT_ID', allowNull: false, defaultValue: 0 },
});

Order.belongsTo(Customer, {
  foreignKey: { name: 'CUSTOMER_ID', allowNull: false, defaultValue: 0 },
});

OrderDetail.belongsTo(Order, {
  foreignKey: { name: 'ORDER_ID', allowNull: false, defaultValue: 0 },
});

OrderDetail.belongsTo(Sneaker, {
  foreignKey: { name: 'SNEAKER_ID', allowNull: false, defaultValue: 0 },
});

//Connection
sequelize
  //.sync()
  .authenticate()
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log('Connection has been established successfully.');
  })
  .catch((err) => {
    console.error('Unable to connect to the database:', err);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
